/*
 * Copyright 2024 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(global_var.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(094ab1d069155e52e0ca29508a0df068)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/rfid/global_var.h>
// pydoc.h is automatically generated in the build directory
#include <global_var_pydoc.h>

void bind_global_var(py::module& m)
{

    using READER_STATS = ::gr::rfid::READER_STATS;
    using READER_STATE = ::gr::rfid::READER_STATE;


    py::class_<READER_STATS, std::shared_ptr<READER_STATS>>(
        m, "READER_STATS", D(READER_STATS))

        .def(py::init<gr::rfid::READER_STATS const&>(),
             py::arg("arg0"),
             D(READER_STATS, READER_STATS, 0))
        .def(py::init<>(), D(READER_STATS, READER_STATS, 1))

        ;


    py::class_<READER_STATE, std::shared_ptr<READER_STATE>>(
        m, "READER_STATE", D(READER_STATE))

        .def(py::init<gr::rfid::READER_STATE const&>(),
             py::arg("arg0"),
             D(READER_STATE, READER_STATE, 0))
        .def(py::init<>(), D(READER_STATE, READER_STATE, 1))

        ;

    py::enum_<::gr::rfid::STATUS>(m, "STATUS")
        .value("RUNNING", ::gr::rfid::STATUS::RUNNING)       // 0
        .value("TERMINATED", ::gr::rfid::STATUS::TERMINATED) // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::rfid::STATUS>();
    py::enum_<::gr::rfid::GEN2_LOGIC_STATUS>(m, "GEN2_LOGIC_STATUS")
        .value("SEND_QUERY", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_QUERY)               // 0
        .value("SEND_ACK", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_ACK)                   // 1
        .value("SEND_QUERY_REP", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_QUERY_REP)       // 2
        .value("IDLE", ::gr::rfid::GEN2_LOGIC_STATUS::IDLE)                           // 3
        .value("SEND_CW", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_CW)                     // 4
        .value("START", ::gr::rfid::GEN2_LOGIC_STATUS::START)                         // 5
        .value("SEND_QUERY_ADJUST", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_QUERY_ADJUST) // 6
        .value("SEND_NAK_QR", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_NAK_QR)             // 7
        .value("SEND_NAK_Q", ::gr::rfid::GEN2_LOGIC_STATUS::SEND_NAK_Q)               // 8
        .value("POWER_DOWN", ::gr::rfid::GEN2_LOGIC_STATUS::POWER_DOWN)               // 9
        .export_values();

    py::implicitly_convertible<int, ::gr::rfid::GEN2_LOGIC_STATUS>();
    py::enum_<::gr::rfid::GATE_STATUS>(m, "GATE_STATUS")
        .value("GATE_OPEN", ::gr::rfid::GATE_STATUS::GATE_OPEN)           // 0
        .value("GATE_CLOSED", ::gr::rfid::GATE_STATUS::GATE_CLOSED)       // 1
        .value("GATE_SEEK_RN16", ::gr::rfid::GATE_STATUS::GATE_SEEK_RN16) // 2
        .value("GATE_SEEK_EPC", ::gr::rfid::GATE_STATUS::GATE_SEEK_EPC)   // 3
        .export_values();

    py::implicitly_convertible<int, ::gr::rfid::GATE_STATUS>();
    py::enum_<::gr::rfid::DECODER_STATUS>(m, "DECODER_STATUS")
        .value("DECODER_DECODE_RN16",
               ::gr::rfid::DECODER_STATUS::DECODER_DECODE_RN16)                      // 0
        .value("DECODER_DECODE_EPC", ::gr::rfid::DECODER_STATUS::DECODER_DECODE_EPC) // 1
        .export_values();

    py::implicitly_convertible<int, ::gr::rfid::DECODER_STATUS>();


    m.def("initialize_reader_state",
          &::gr::rfid::initialize_reader_state,
          D(initialize_reader_state));
}
